// Generated by CoffeeScript 1.10.0
(function() {
    let ConnectionFactory = require('sql-client/lib/connection-factory').ConnectionFactory;
    let SQLClient         = require('sql-client/lib/sql-client').SQLClient;
    let SQLClientPool     = require('sql-client/lib/sql-client-pool').SQLClientPool;
    let mssql             = require('mssql');

    let bind = function (fn, me) {
        return function () {
            return fn.apply(me, arguments);
        };
    };
    let extend = function (child, parent) {
        for (const key in parent) {
            if (hasProp.call(parent, key)) {
                child[key] = parent[key];
            }
        }
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    };

    let hasProp = {}.hasOwnProperty;
    let slice = [].slice;

    let MSSQLConnectionFactory = (function(superClass) {
        extend(MSSQLConnectionFactory, superClass);

        function MSSQLConnectionFactory() {
            this.execute = bind(this.execute, this);
            this.open_connection = bind(this.open_connection, this);
            return MSSQLConnectionFactory.__super__.constructor.apply(this, arguments);
        }

        MSSQLConnectionFactory.prototype.open_connection = function(config, callback) {
            let connection;
            const pos = config.server.indexOf(':');
            if (pos !== -1) {
                config.port = parseInt(config.server.substring(pos + 1), 10);
                config.server = config.server.substring(0, pos);
            }

            return connection = new mssql.Connection(config, err => {
                if (err != null) {
                    return callback(err);
                } else {
                    return callback(null, connection);
                }
            });
        };

        MSSQLConnectionFactory.prototype.execute = function(connection, sql, bindvars, callback) {
            const request = new mssql.Request(connection);
            return request.query(sql, (err, recordset) => callback(err, recordset));
        };

        return MSSQLConnectionFactory;

    })(ConnectionFactory);

    let MSSQLClient = (function (superClass) {
        extend(MSSQLClient, superClass);

        function MSSQLClient() {
            const options = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            MSSQLClient.__super__.constructor.apply(this, slice.call(options).concat([new MSSQLConnectionFactory()]));
        }

        return MSSQLClient;

    })(SQLClient);

    let MSSQLClientPool = (function (superClass) {
        extend(MSSQLClientPool, superClass);

        function MSSQLClientPool() {
            const options = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            MSSQLClientPool.__super__.constructor.apply(this, slice.call(options).concat([new MSSQLConnectionFactory()]));
        }

        return MSSQLClientPool;

    })(SQLClientPool);

    exports.MSSQLConnectionFactory = MSSQLConnectionFactory;

    exports.MSSQLClient = MSSQLClient;

    exports.MSSQLClientPool = MSSQLClientPool;

}).call(this);
